import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import "bootstrap/dist/css/bootstrap.min.css";
import App from "./App";
// import reportWebVitals from "./reportWebVitals";
import { Provider as ReduxProvider } from "react-redux";
import { BrowserRouter as Router } from "react-router-dom";
import { PersistGate } from "redux-persist/integration/react";
import { store, persistor } from "./redux/configureStore";
import "@fontsource/inter";

/*
This application is a video client based on Webex SDK (https://developer.webex.com/docs/sdks/browser)
It can be used to join a Webex meeting or to call a SIP URI (for example on Cisco Meeting Server).
User's identity is generated by Webex Guest Issuer (https://developer.webex.com/docs/guest-issuer). You need to register
your own Issuer at https://developer.webex.com/my-apps/new/guest-issuer and then configure guestId and guestSecret in /src/api/webexConfig.localhost.json
(copy the webexConfig.sample.json).

The application has three components:
- MeetingContext holds the webexClient and meeting objects and is responsible for all actions on top of the SDK API.
- MeetingView is the main component that displays the video streams and modal dialogs.
- MeetingControls and MeetingIdForm are control components used for connecting or controlling the meeting.

The application is built with React and uses Material-UI components. It uses Redux for state management
and redux-persist for storing the state in the browser's local storage. As Webex SDK is based on objects that cannot be serialized,
MeetingContext uses React's useContext to maintain the state, conduct actions and pass the state to the components. The Guest
Issuer is using Webex API, so the user part of the application is using Redux to store the user's data and handle login/logout actions.
*/

const base = process.env.ROOT_URL;
console.log("base: ", base);

ReactDOM.render(
  <ReduxProvider store={store}>
    <Router basename={base}>
      <PersistGate loading={null} persistor={persistor}>
        <App />
      </PersistGate>
    </Router>
  </ReduxProvider>,
  document.getElementById("app")
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
// reportWebVitals();
